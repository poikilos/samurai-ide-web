#!/bin/sh
. samurai-ide-web.rc
if [ $? -ne 0 ]; then
    echo "Error: samurai-ide-web.rc failed to load."
    exit 1
fi
id -u $WEB_USER >& /dev/null
if [ $? -ne 0 ]; then
    printf "* adding $WEB_USER (--home $WEB_USER_HOME [$REPO_PATH is the location for the runnable python service. There are no files to be served directly by apache/NGINX/etc])"
    adduser --disabled-password --gecos "" --home $WEB_USER_HOME $WEB_USER
    # --gecos GECOS
    #       Set  the  gecos field for the new entry generated.  adduser will
    #       not ask for finger information if this option is given.
    # ^ non-interactive user creation (doesn't ask for full name, room
    #   number, etc) <https://en.wikipedia.org/wiki/Gecos_field>.
    if [ $? -ne 0 ]; then
        echo "FAILED (run the script as root)"
        exit 1
    else
        echo "OK"
    fi
else
    echo "  * The user already exists and will be used."
fi
# if [ $UID -ne 0 ]; then
#     echo "This script must run as root or WEB_USER."
#     exit 1
# else
echo "* installing $REPO_NAME under \"$WEB_USER_HOME\"..."
# fi
if [ ! -d "$REPO_PATH" ]; then
    echo "* installing $URL to $REPO_PATH..."
    sudo -u $WEB_USER git clone $REPO_URL "$REPO_PATH"
    if [ $? -ne 0 ]; then
        echo "  * 'sudo -u $WEB_USER git clone $REPO_URL \"$REPO_PATH\"' failed."
        # exit 1
    else
        echo "  * OK"
    fi
else
    echo "* using existing $REPO_PATH"
fi
printf "'cd $REPO_PATH'..."
cd $REPO_PATH
code=$?
if [ $code -eq 0 ]; then
    echo "OK"
else
    echo "FAILED"
    # exit $code
fi

# sudo -u $WEB_USER mkvirtualenv samuraiweb
# ^ from ninja-ide-web readme, but not great

# sudo -u $WEB_USER touch $WEB_USER_HOME/.bashrc
# chown $WEB_USER:$WEB_USER $WEB_USER_HOME/.bashrc
# Based on <https://www.geeksforgeeks.org/using-mkvirtualenv-to-create-new-virtual-environment-python/>:
# echo "export WORKON_HOME=$WEB_USER_HOME/.virtualenvs" >> $WEB_USER_HOME/.bashrc
# echo "export PROJECT_HOME=$WEB_USER_HOME/Devel" >> $WEB_USER_HOME/.bashrc
# echo "source /usr/local/bin/virtualenvwrapper.sh" >> $WEB_USER_HOME/.bashrc
# ^ That is not great either, so do it a better way:
echo "This file was generated by the $me install script at \"$myPath\". The filename is a note to the administrator." | sudo -u $WEB_USER tee "$WEB_USER_HOME/This directory contains the .virtualenvs hidden directory"
printf "* 'mkdir -p \"$VENVS_DIR\"'..."
sudo -u $WEB_USER mkdir -p "$VENVS_DIR"
code=$?
if [ $code -eq 0 ]; then
    echo "OK"
else
    echo "FAILED"
    exit $code
fi

sudo -u $WEB_USER python3 -m venv -h
code=$?
if [ $code -ne 0 ]; then
    echo "Error: 'python3 -m venv h' failed. Try installing the python3-venv package first, such as via:"
    echo "  apt-get install python3-venv"
    exit $code
fi



if [ ! -d "$VENV_DIR" ]; then
    # printf "* generating \"$VENV_DIR\"..."
    echo
    sudo -u $WEB_USER python3 -m venv $VENV_DIR
    code=$?
    if [ $code -eq 0 ]; then
        # echo "OK"
        echo "* generated venv \"$VENV_DIR\""
    else
        # echo "FAILED"
        cat <<END
Error: venv is present for $WEB_USER, but creating a venv failed. If
the previous error starts with
"The virtual environment was not created successfully because ensurepip is not
available. . . ." then you maybe the python module is installed but not
the system package and dependencies. Try installing the python3-venv
system package such as via:

    sudo apt-get install -y python3-venv

as per <https://askubuntu.com/questions/879437/ensurepip-is-disabled-in-debian-ubuntu-for-the-system-python>
Then delete the failed venv:

    sudo -u $WEB_USER rm -rf $VENV_DIR

then try running install again.


END
        exit $code
    fi
else
    echo "* using existing \"$VENV_DIR\" as venv (virtual environment)"
fi

. $VENV_DIR/bin/activate
code=$?
if [ $code -ne 0 ]; then
    echo "Error: '. $VENV_DIR/bin/activate' failed."
    exit $code
fi

sudo -u $WEB_USER $PYTHON3 -m pip install --upgrade pip wheel

printf "* generating \"$VENV_DIR/.project\"..."
pwd | sudo -u $WEB_USER tee $VENV_DIR/.project
code=$?
if [ $code -ne 0 ]; then echo "  FAILED"; echo "exit $code"; else echo "  OK"; fi
printf "* installing requirements..."
sudo -u $WEB_USER $PYTHON3 -m pip install -r requirements/dev.txt
print "* 'cd mezzaninja' (from `pwd`)..."
cd mezzaninja
if [ $code -ne 0 ]; then echo "  FAILED"; echo "exit $code"; else echo "  OK"; fi
# add2virtualenv .
# ^ requires virtualenvwrappr. Instead, do:
SITE_PACKAGES=`sudo -u $WEB_USER $PYTHON3 -c "from distutils.sysconfig import get_python_lib; print(get_python_lib())"`
pwd | sudo -u $WEB_USER tee $SITE_PACKAGES/mezzaninja.pth
# ^ The directory in the pth file gets appended to PYTHON_PATH automatically.


# ^ Avoid "ImportError: No module named django.core.management" on manage.py below.

tmpInst="$WEB_USER_HOME/install-more.tmp"
echo '#!/bin/bash' | sudo -u $WEB_USER tee "$tmpInst"
echo 'echo "* running $0 in `pwd`..."' | sudo -u $WEB_USER tee -a "$tmpInst"
echo 'export DJANGO_SETTINGS_MODULE="mezzaninja.settings"' | sudo -u $WEB_USER tee -a "$tmpInst"
echo 'ln -s settings/dev.py settings/active.py' | sudo -u $WEB_USER tee -a "$tmpInst"
echo "$PYTHON3 ./manage.py syncdb --migrate" | sudo -u $WEB_USER tee -a "$tmpInst"
# echo './manage.py runserver' | sudo -u $WEB_USER tee -a "$tmpInst"
echo 'code=$?' | sudo -u $WEB_USER tee -a "$tmpInst"
echo 'exit $code' | sudo -u $WEB_USER tee -a "$tmpInst"
sudo -u $WEB_USER chmod +x "$tmpInst"
sudo -u $WEB_USER $tmpInst

echo '#!/bin/bash' | sudo -u $WEB_USER tee "$serverStarter"
echo 'export DJANGO_SETTINGS_MODULE="mezzaninja.settings"' | sudo -u $WEB_USER tee -a "$serverStarter"
echo "$PYTHON3 ./manage.py runserver" | sudo -u $WEB_USER tee -a "$serverStarter"
echo 'exit $?' | sudo -u $WEB_USER tee -a "$serverStarter"
sudo -u $WEB_USER chmod +x "$serverStarter"
sudo -u $WEB_USER $serverStarter

# Create the service file
# - based on parsoid.service
# - For WorkingDirectory and Environment, see <http://0pointer.de/public/systemd-man/systemd.exec.html#Environment=>.
# - See also [Simple systemd unit for running a django app](https://gist.github.com/toast38coza/734c89775be9ddd69351)
cat > $serverService <<END
[Unit]
Description=$Description
Documentation=$Documentation
Wants=local-fs.target network.target
After=local-fs.target network.target

[Install]
WantedBy=multi-user.target

[Service]
Environment="DJANGO_SETTINGS_MODULE=mezzaninja.settings"
Type=simple
User=$WEB_USER
Group=$WEB_USER_GROUP
WorkingDirectory=$REPO_PATH/mezzninja
ExecStart=$PYTHON3 ./manage.py runserver
KillMode=process
Restart=on-failure
PrivateTmp=true
StandardOutput=syslog

END


# To see any files that should be in .gitignore at this point if only above was done:
#   # git status  # or for every file:
#   git ls-files -m -o -d
