#!/bin/bash
echo "This install method is deprecated. Use the regular non-root install.sh instead."
exit 1
INSTALLER=""
INSTALL_SRC=""
cat <<END

Starting $0...
END
if [ -f "$0" ]; then
    INSTALLER=`realpath "$0"`
    INSTALL_SRC=`dirname $INSTALLER`
fi
if [ ! -z "$INSTALL_SRC" ]; then
    echo "* using INSTALL_SRC \"$INSTALL_SRC\" instead of git"
    echo "  * since using INSTALLER \"$INSTALLER\""
else
    echo "* using git as the install source"
fi
. samurai-ide-web.rc
if [ $? -ne 0 ]; then
    echo "Error: samurai-ide-web.rc failed to load."
    exit 1
fi
# if [ $UID -ne 0 ]; then
#     echo "This script must run as root or WWW_USER."
#     exit 1
# else
echo "* installing $REPO_NAME under \"$WEB_USER_HOME\"..."
# fi
UPDATE=false
if [ ! -d "$REPO_PATH" ]; then
    if [ -z "$INSTALL_SRC" ]; then
        echo "* installing $URL to $REPO_PATH..."
        sudo -u $WWW_USER git clone $REPO_URL "$REPO_PATH"
    else
        echo "* installing $INSTALL_SRC to $REPO_PATH..."
        sudo -u $WWW_USER rsync -rt $INSTALL_SRC/ "$REPO_PATH"
    fi
    if [ $? -ne 0 ]; then
        echo "  * 'sudo -u $WWW_USER git clone $REPO_URL \"$REPO_PATH\"' failed."
        exit 1
    else
        echo "  * OK"
    fi
else
    echo "* using existing $REPO_PATH"
    UPDATE=true
fi
printf "'cd $REPO_PATH'..."
cd $REPO_PATH
code=$?
if [ $code -eq 0 ]; then
    echo "OK"
else
    echo "FAILED"
    exit $code
fi
if [ "$PYTHON_MAJOR_VERSION" = "2" ]; then
    echo "* WARNING: Switching to develop-python2 branch since PYTHON_MAJOR_VERSION=2"
    # git switch develop-python2
    # ^ doesn't work on older versions of git
    #   So see
    #   <https://www.freecodecamp.org/news/git-checkout-remote-branch-tutorial/>:
    git fetch origin
    git checkout -b develop-python2 origin/develop-python2
fi
if [ "@$UPDATE" = "@true" ]; then
    if [ -z "$INSTALL_SRC" ]; then
        git pull --verbose
    else
        echo "* updating $REPO_PATH from $INSTALL_SRC DESTRUCTIVELY..."
        sudo -u $WWW_USER rsync -rt --delete $INSTALL_SRC/ "$REPO_PATH"
        code=$?
        if [ $code -ne 0 ]; then echo "  FAILED"; exit $code; else echo "  OK"; fi
        #if [ $code -ne 0 ]; then
        #    echo "  FAILED"
        #    exit $code
        #else
        #    echo "  OK"
        #fi
    fi
fi
# sudo -u $WWW_USER mkvirtualenv samuraiweb
# ^ from ninja-ide-web readme, but not great

# sudo -u $WWW_USER touch $WEB_USER_HOME/.bashrc
# chown $WWW_USER:$WWW_USER $WEB_USER_HOME/.bashrc
# Based on <https://www.geeksforgeeks.org/using-mkvirtualenv-to-create-new-virtual-environment-python/>:
# echo "export WORKON_HOME=$WEB_USER_HOME/.virtualenvs" >> $WEB_USER_HOME/.bashrc
# echo "export PROJECT_HOME=$WEB_USER_HOME/Devel" >> $WEB_USER_HOME/.bashrc
# echo "source /usr/local/bin/virtualenvwrapper.sh" >> $WEB_USER_HOME/.bashrc
# ^ That is not great either, so do it a better way:
echo "This file was generated by the $me install script at \"$myPath\". The filename is a note to the administrator." | sudo -u $WWW_USER tee "$WEB_USER_HOME/This directory contains the .virtualenvs hidden directory"
printf "* 'mkdir -p \"$VENVS_DIR\"'..."
sudo -u $WWW_USER mkdir -p "$VENVS_DIR"
code=$?
if [ $code -eq 0 ]; then
    echo "OK"
else
    echo "FAILED"
    exit $code
fi

if [ "$PYTHON_MAJOR_VERSION" = "2" ]; then
    sudo -u $WWW_USER virtualenv -h
    code=$?
    if [ $code -ne 0 ]; then
        echo "Error: '$SYS_PYTHON -m venv h' failed. Try installing the $SYS_PYTHON-venv package first, such as via:"
        echo "  apt-get install python-virtualenv  #or possibly python2-virtualenv"
        exit $code
    fi
    # printf "* generating \"$VENV_DIR\"..."
    echo
    sudo -u $WWW_USER virtualenv $VENV_DIR
    code=$?
else
    sudo -u $WWW_USER $SYS_PYTHON -m venv -h
    code=$?
    if [ $code -ne 0 ]; then
        echo "Error: '$SYS_PYTHON -m venv h' failed. Try installing the $SYS_PYTHON-venv package first, such as via:"
        echo "  apt-get install $SYS_PYTHON-venv"
        exit $code
    fi
    # printf "* generating \"$VENV_DIR\"..."
    echo
    sudo -u $WWW_USER $SYS_PYTHON -m venv $VENV_DIR
    code=$?
fi

if [ ! -d "$VENV_DIR" ]; then
    if [ $code -eq 0 ]; then
        # echo "OK"
        echo "* generated venv \"$VENV_DIR\""
    else
        # echo "FAILED"
        cat <<END
Error: venv is present for $WWW_USER, but creating a venv failed. If
the previous error starts with
"The virtual environment was not created successfully because ensurepip is not
available. . . ." then you maybe the python module is installed but not
the system package and dependencies. Try installing the $SYS_PYTHON-venv
system package such as via:

    sudo apt-get install -y $SYS_PYTHON-venv

as per <https://askubuntu.com/questions/879437/ensurepip-is-disabled-in-debian-ubuntu-for-the-system-python>
Then delete the failed venv:

    sudo -u $WWW_USER rm -rf $VENV_DIR

then try running install again.


END
        exit $code
    fi
else
    echo "* using existing \"$VENV_DIR\" as venv (virtual environment)"
fi

. $VENV_DIR/bin/activate
code=$?
if [ $code -ne 0 ]; then
    echo "Error: '. $VENV_DIR/bin/activate' failed."
    exit $code
fi

sudo -u $WWW_USER $VENV_PYTHON -m pip install --upgrade pip wheel

printf "* generating \"$VENV_DIR/.project\"..."
pwd | sudo -u $WWW_USER tee $VENV_DIR/.project
code=$?
if [ $code -ne 0 ]; then echo "  FAILED"; exit $code; else echo "  OK"; fi
printf "* installing requirements..."
sudo -u $WWW_USER $VENV_PYTHON -m pip install -r requirements/dev.txt
sudo -u $WWW_USER $VENV_PYTHON -m pip install nose
print "* 'cd mezzaninja' (from `pwd`)..."
cd mezzaninja
code=$?
if [ $code -ne 0 ]; then echo "  FAILED"; echo "exit $code"; else echo "  OK"; fi
# add2virtualenv .
# ^ requires virtualenvwrappr. Instead, do:
SITE_PACKAGES=`sudo -u $WWW_USER $VENV_PYTHON -c "from distutils.sysconfig import get_python_lib; print(get_python_lib())"`
echo
echo "* generating $SITE_PACKAGES/mezzaninja.pth..."
pwd | sudo -u $WWW_USER tee $SITE_PACKAGES/mezzaninja.pth
# ^ The directory in the pth file gets appended to PYTHON_PATH automatically.


# ^ Avoid "ImportError: No module named django.core.management" on manage.py below.

tmpInst="$WEB_USER_HOME/install-more.tmp"

echo
echo "* generating \"$tmpInst\"..."
echo '#!/bin/bash' | sudo -u $WWW_USER tee "$tmpInst"
echo "cd \"`pwd`\""
echo echo "* running $tmpInst in \`pwd\`..." | sudo -u $WWW_USER tee -a "$tmpInst"
echo 'export DJANGO_SETTINGS_MODULE="mezzaninja.settings"' | sudo -u $WWW_USER tee -a "$tmpInst"
# echo 'ln -s settings/dev.py settings/active.py' | sudo -u $WWW_USER tee -a "$tmpInst"
echo echo "* installing settings/dev.py as settings/active.py..." | sudo -u $WWW_USER tee -a "$tmpInst"
echo 'cp settings/dev.py settings/active.py' | sudo -u $WWW_USER tee -a "$tmpInst"
echo "$VENV_PYTHON ./manage.py syncdb --migrate" | sudo -u $WWW_USER tee -a "$tmpInst"
# echo './manage.py runserver' | sudo -u $WWW_USER tee -a "$tmpInst"
echo 'code=$?' | sudo -u $WWW_USER tee -a "$tmpInst"
echo 'exit $code' | sudo -u $WWW_USER tee -a "$tmpInst"
sudo -u $WWW_USER chmod +x "$tmpInst"
sudo -u $WWW_USER $tmpInst
code=$?
if [ $code -ne 0 ]; then echo "  FAILED"; exit $code; else echo "  OK"; fi

echo
echo "* generating \"$serverStarter\"..."

echo '#!/bin/bash' | sudo -u $WWW_USER tee "$serverStarter"
echo 'export DJANGO_SETTINGS_MODULE="mezzaninja.settings"' | sudo -u $WWW_USER tee -a "$serverStarter"
echo "echo \"* Running '$VENV_PYTHON ./manage.py runserver'...\"" | sudo -u $WWW_USER tee -a "$serverStarter"
echo "$VENV_PYTHON ./manage.py runserver" | sudo -u $WWW_USER tee -a "$serverStarter"
echo 'exit $?' | sudo -u $WWW_USER tee -a "$serverStarter"
sudo -u $WWW_USER chmod +x "$serverStarter"
sudo -u $WWW_USER $serverStarter
code=$?
if [ $code -ne 0 ]; then echo "  FAILED"; exit $code; else echo "  OK"; fi
echo
# Create the service file
# - based on parsoid.service
# - For WorkingDirectory and Environment, see <http://0pointer.de/public/systemd-man/systemd.exec.html#Environment=>.
# - See also [Simple systemd unit for running a django app](https://gist.github.com/toast38coza/734c89775be9ddd69351)
echo "* generating \"$serverService\"..."
cat > $serverService <<END
[Unit]
Description=$Description
Documentation=$Documentation
Wants=local-fs.target network.target
After=local-fs.target network.target

[Install]
WantedBy=multi-user.target

[Service]
Environment="DJANGO_SETTINGS_MODULE=mezzaninja.settings"
Type=simple
User=$WWW_USER
Group=$WEB_USER_GROUP
WorkingDirectory=$REPO_PATH/mezzninja
ExecStart=$VENV_PYTHON ./manage.py runserver
KillMode=process
Restart=on-failure
PrivateTmp=true
StandardOutput=syslog

END


# To see any files that should be in .gitignore at this point if only above was done:
#   # git status  # or for every file:
#   git ls-files -m -o -d
